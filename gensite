#!/bin/bash

RED_COLOR="\033[1;31m"
BLUE_COLOR="\033[1;34m"
GREEN_COLOR="\033[1;32m"
NO_COLOR="\033[0m"
ACCEPT_EXTENSION=("png" "jpg" "jpeg")

help () {
    echo "Generate your website with gensite üî•"
    echo
    echo -e "${GREEN_COLOR}Available commands:${NO_COLOR}"
    echo -e "\t${BLUE_COLOR}init  | i${NO_COLOR}    Init project üéâ"
    echo -e "\t${BLUE_COLOR}image | img${NO_COLOR}  Add images to project üèû"
    echo
    echo "Options:"
    echo -e "\t-h, --help    Display help for the given command. When no command is given display help for the list command."
    echo
}

verify_project_context () {
    # Check if there is a .gensite file in current path
    if (($(ls -la | grep "\.gensite" -c) != 1));
    then echo -e "${RED_COLOR}[ERROR] Please be in a project folder or initialize one !${NO_COLOR}" && exit
    fi
}

verify_project_not_init() {
    # check if the project is not yet instantiated
    if (($(ls -la | grep "\.gensite" -c) == 1));
    then echo -e "${RED_COLOR}[ERROR] A project is already init in this folder !${NO_COLOR}" && exit
    fi
}
write_article()
{
    search_file="<!--{{cards}}-->"
    img_article=$( tail -n 1 .gensite | cut -d ":" -f 2 )
    user_name=$( grep "{user_name}:" .gensite | cut -d ":" -f 2 )
    pseudonyme=$( grep "{pseudonyme}:" .gensite | cut -d ":" -f 2 )
    card_article=$( cat cards.html)
    card_article=${card_article/"{{user_name}}"/$user_name}
    card_article=${card_article/"{{pseudonyme}}"/$pseudonyme}
    card_article="${card_article/"{{image_article}}"/images/$img_article}"
    card_article=${card_article//$'\n'/\\n}
    #echo $card_article
    sed -i "s|$search_file|$card_article|" index.html
}

init () {
    # Function for init command
    
    help () {
        echo -e "${GREEN_COLOR}gensite init:${NO_COLOR}";
        echo;
        echo -e "\tgensite init {project_name} {path}";
        echo -e "\t\t{path} : Optional (default path is current folder)";
        echo
    }
    
    init_project () {
        # Main init project function
        verify_project_not_init
        
        project_name=$2
        [[ -n $3 ]] && path="$3" || path="$(PWD)" # Affect default value to path if not specified
        
        project_path="${path}/${project_name}"
        
        echo "Initialising project here : $project_path"
        mkdir $project_path
        mkdir $project_path/images
        touch "$project_path/.gensite"
        touch "$project_path/.compteur_img"
        echo "{project_name}:${project_name}" >> $project_path/.gensite
        echo "{project_path}:${project_path}" >> $project_path/.gensite
        echo "4">>"$project_path/.compteur_img"
        read -e -p "Enter Your Name [Default : Anonyme] : " user_name
        user_name="${user_name:=Anonyme}"
        echo "{user_name}:${user_name}" >> $project_path/.gensite
        
        read -e -p "Enter Your Pseudonyme [Default : anonyme] : " pseudonyme
        pseudonyme="${pseudonyme:=anonyme}"
        echo "{pseudonyme}:${pseudonyme}" >> $project_path/.gensite

        
        
        echo -e "${BLUE_COLOR}Your project is init here üéâ : ${project_path}${NO_COLOR}";
        
        # Pull template
        curl https://raw.githubusercontent.com/malo2b/project_admin_sys_template/master/index.html >> $project_path/index.html
        curl https://raw.githubusercontent.com/malo2b/project_admin_sys_template/master/style.css >> $project_path/style.css
        curl https://raw.githubusercontent.com/malo2b/project_admin_sys_template/master/cards.html >> $project_path/cards.html
        cd $project_path
        sed -i "s|{{user_name}}|$user_name|g" index.html

    }
    
    if [ $# -le 1 ]; # Not enouth params
    then
        help;
    elif
    [ $# -ge 4 ]; # Too many params
    then
        echo -e "${RED_COLOR}[ERROR] Too many params !${NO_COLOR}\n";
        help;
    else
        case $2 in
            
            "-h" | "--help")
                help;
            ;;
            
            *)
                init_project $*;
            ;;
            
        esac
    fi
    
    
}

images () {
    # Function for images command
    verify_project_context
    
    help () {
        echo -e "${GREEN_COLOR}gensite images:${NO_COLOR}";
        echo;
        echo "Options:";
        echo -e "\t-a, --add    {image}     Add an image (jpg, jpeg or png) to the project. If several images use space to separate images.";
        echo -e "\t-f, --folder {path}      Add all images (jpg, jpeg or png) in a folder to the project.";
        echo -e "\t-d, --default            Add default images.";
        echo;
    }
    
    add () {
        # Add an image to project
        read -r compteur_article<.compteur_img
        for image in "${@:3}" # Iterate on images but not command args
        do
            if test -f $image;then
                filename=$(basename -- "$image")
                extension="${filename##*.}"
                if [[ " ${ACCEPT_EXTENSION[*]} " =~ " ${extension} " ]]; then
                    cp $image ./images
                    echo "{image_article_$compteur_article}:$filename">>.gensite
                    write_article
                    ((compteur_article+=1))
                    
                else
                    echo "${file} can't be download, it sould be a png or jpg"
                fi
            else
                echo "The file ${image} doesn't exist"
            fi
        done
        echo $compteur_article>.compteur_img
    }
    
    add_folder () {
        # Add image folder in project
        read -r compteur_article<.compteur_img
        for folder in "${@:3}" # Iterate on images but not command args
        do
            if test -d $folder;then
                for file in $folder*; do
                    filename=$(basename -- "$file")
                    extension="${filename##*.}"
                    if [[ " ${ACCEPT_EXTENSION[*]} " =~ " ${extension} " ]]; then
                        cp $file ./images
                        echo "{image_article_$compteur_article}:$filename">>.gensite
                        write_article
                        ((compteur_article+=1))
                    else
                        echo "${file} can't be download, it sould be a png or jpg"
                    fi
                done
            else
                echo "${folder} is not a directory or doesn't exist"
            fi
        done
        echo $compteur_article>.compteur_img
    }
    
    add_default () {
        # Add default images to project
        url="https://raw.githubusercontent.com/malo2b/project_admin_sys_template/master/images.zip"
        curl -LO -f $url && rm -rf images && unzip images.zip && rm images.zip || echo -e "${RED_COLOR}Error to get default images, check your internet connection:${NO_COLOR}"
        config_images_default="images/.gensite_image"
        name_img=""
        identifiant_html=""
        while read -r line
            do
                identifiant_html=$( echo "$line" | cut -d "=" -f 1 )
                name_img=$( echo "$line" | cut -d "=" -f 2 )
                echo "{$identifiant_html}:$name_img" >> .gensite

                if [ "$identifiant_html" != "main_image" ]; then
                    write_article
                else
                    main_image=$( grep "{main_image}:" .gensite | cut -d ":" -f 2 )
                    sed -i "s|{{main_image}}|images/$main_image|g" index.html
                fi
            done < "$config_images_default"
        rm $config_images_default
    }
    
    if [ $# -le 1 ]; # Not enouth params
    then
        help;
    else
        case $2 in
            "-h" | "--help")
                help;
            ;;
            
            "-a" | "--add")
                add $*;
            ;;
            "-f" | "--folder")
                add_folder $*;
            ;;
            "-d" | "--default")
                add_default;
            ;;
            
            *)
                help;
            ;;
            
        esac
    fi
}

# CLI entry point
case $1 in
    
    "-h" | "--help" | "")
        help;
    ;;
    
    "i" | "init")
        init $*;
    ;;
    
    "img" | "image")
        images $*;
    ;;
    
    *)
        echo -e "${RED_COLOR}The command $1 does not exist.${NO_COLOR}";
    ;;
    
esac